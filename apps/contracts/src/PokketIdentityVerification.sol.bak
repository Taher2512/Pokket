// SPDX-License-Identifier: MIT
pragma solidity 0.8.28;

import {SelfVerificationRoot} from "@selfxyz/contracts/contracts/abstract/SelfVerificationRoot.sol";
import {ISelfVerificationRoot} from "@selfxyz/contracts/contracts/interfaces/ISelfVerificationRoot.sol";
import {SelfStructs} from "@selfxyz/contracts/contracts/libraries/SelfStructs.sol";
import {SelfUtils} from "@selfxyz/contracts/contracts/libraries/SelfUtils.sol";
import {IIdentityVerificationHubV2} from "@selfxyz/contracts/contracts/interfaces/IIdentityVerificationHubV2.sol";

/**
 * @title PokketIdentityVerification
 * @notice Identity verification contract for Pokket Wallet using SELF protocol
 * @dev This contract provides identity verification for Pokket users
 */
contract PokketIdentityVerification is SelfVerificationRoot {
    // Storage for verification configuration
    SelfStructs.VerificationConfigV2 public verificationConfig;
    bytes32 public verificationConfigId;

    // Mapping to store user verification data
    mapping(bytes32 => UserVerificationData) public verifiedUsers;
    mapping(address => bytes32) public userToNullifier;
    mapping(bytes32 => address) public nullifierToUser;

    // Struct to store user verification data
    struct UserVerificationData {
        bytes32 nullifierId;
        address ethAddress;
        address solAddress;
        string name;
        string nationality;
        uint256 age;
        string issuingState;
        uint256 verifiedAt;
        bool isVerified;
    }

    // Events
    event UserVerified(
        bytes32 indexed nullifierId,
        address indexed ethAddress,
        address indexed solAddress,
        string name,
        string nationality,
        uint256 age,
        string issuingState,
        uint256 timestamp
    );

    event AddressesLinked(
        bytes32 indexed nullifierId,
        address indexed ethAddress,
        address indexed solAddress
    );

    /**
     * @notice Constructor for the Pokket Identity Verification contract
     * @param identityVerificationHubV2Address The address of the Identity Verification Hub V2
     * @param scopeSeed Unique scope seed for this application ("pokket-identity-verification")
     */
    constructor(
        address identityVerificationHubV2Address,
        string memory scopeSeed
    ) SelfVerificationRoot(identityVerificationHubV2Address, scopeSeed) {
        // Create verification config for Indian Aadhar card verification
        string[] memory forbiddenCountries = new string[](0); // No country restrictions
        
        SelfUtils.UnformattedVerificationConfigV2 memory rawConfig = SelfUtils.UnformattedVerificationConfigV2({
            olderThan: 18, // Must be 18 or older
            forbiddenCountries: forbiddenCountries,
            ofacEnabled: false // Disabled for testnet
        });

        // Format and register the config
        verificationConfig = SelfUtils.formatVerificationConfigV2(rawConfig);
        verificationConfigId = IIdentityVerificationHubV2(identityVerificationHubV2Address)
            .setVerificationConfigV2(verificationConfig);
    }

    /**
     * @notice Returns the verification config ID
     * @dev This is called by the hub to get the config for verification
     */
    function getConfigId(
        bytes32 /* destinationChainId */,
        bytes32 /* userIdentifier */,
        bytes memory /* userDefinedData */
    ) public view override returns (bytes32) {
        return verificationConfigId;
    }

    /**
     * @notice Custom verification hook called after successful verification
     * @dev This function processes the verification output and stores user data
     * @param output The verification output from the hub
     * @param userData User-defined data passed through verification
     */
    function customVerificationHook(
        ISelfVerificationRoot.GenericDiscloseOutputV2 memory output,
        bytes memory userData
    ) internal override {
        // Parse user data to extract ETH and SOL addresses
        (address ethAddress, address solAddress) = abi.decode(userData, (address, address));
        
        // Extract nullifier ID from output
        bytes32 nullifierId = output.nullifierId;

        // Store verification data
        UserVerificationData memory verificationData = UserVerificationData({
            nullifierId: nullifierId,
            ethAddress: ethAddress,
            solAddress: solAddress,
            name: output.name,
            nationality: output.nationality,
            age: output.age,
            issuingState: output.issuingState,
            verifiedAt: block.timestamp,
            isVerified: true
        });

        // Store mappings
        verifiedUsers[nullifierId] = verificationData;
        userToNullifier[ethAddress] = nullifierId;
        nullifierToUser[nullifierId] = ethAddress;

        // Emit events
        emit UserVerified(
            nullifierId,
            ethAddress,
            solAddress,
            output.name,
            output.nationality,
            output.age,
            output.issuingState,
            block.timestamp
        );

        emit AddressesLinked(nullifierId, ethAddress, solAddress);
    }

    /**
     * @notice Link additional addresses to a verified user
     * @dev Only the verified user can link additional addresses
     * @param nullifierId The nullifier ID of the verified user
     * @param newEthAddress New Ethereum address to link
     * @param newSolAddress New Solana address to link
     */
    function linkAddresses(
        bytes32 nullifierId,
        address newEthAddress,
        address newSolAddress
    ) external {
        require(verifiedUsers[nullifierId].isVerified, "User not verified");
        require(nullifierToUser[nullifierId] == msg.sender, "Not authorized");

        // Update addresses
        verifiedUsers[nullifierId].ethAddress = newEthAddress;
        verifiedUsers[nullifierId].solAddress = newSolAddress;
        
        // Update mappings
        userToNullifier[newEthAddress] = nullifierId;
        nullifierToUser[nullifierId] = newEthAddress;

        emit AddressesLinked(nullifierId, newEthAddress, newSolAddress);
    }

    /**
     * @notice Get verification data by nullifier ID
     * @param nullifierId The nullifier ID to query
     * @return The verification data for the user
     */
    function getVerificationByNullifier(bytes32 nullifierId) 
        external 
        view 
        returns (UserVerificationData memory) 
    {
        return verifiedUsers[nullifierId];
    }

    /**
     * @notice Get verification data by Ethereum address
     * @param ethAddress The Ethereum address to query
     * @return The verification data for the user
     */
    function getVerificationByAddress(address ethAddress) 
        external 
        view 
        returns (UserVerificationData memory) 
    {
        bytes32 nullifierId = userToNullifier[ethAddress];
        return verifiedUsers[nullifierId];
    }

    /**
     * @notice Check if a user is verified by address
     * @param ethAddress The Ethereum address to check
     * @return true if the user is verified, false otherwise
     */
    function isUserVerified(address ethAddress) external view returns (bool) {
        bytes32 nullifierId = userToNullifier[ethAddress];
        return verifiedUsers[nullifierId].isVerified;
    }

    /**
     * @notice Get nullifier ID by Ethereum address
     * @param ethAddress The Ethereum address to query
     * @return The nullifier ID for the user
     */
    function getNullifierByAddress(address ethAddress) external view returns (bytes32) {
        return userToNullifier[ethAddress];
    }

    /**
     * @notice Get Ethereum address by nullifier ID
     * @param nullifierId The nullifier ID to query
     * @return The Ethereum address for the user
     */
    function getAddressByNullifier(bytes32 nullifierId) external view returns (address) {
        return nullifierToUser[nullifierId];
    }

    /**
     * @notice Get the current scope for this contract
     * @return The computed scope value
     */
    function getScope() external view returns (uint256) {
        return scope();
    }

    /**
     * @notice Get contract configuration info
     * @return hubAddress The hub contract address
     * @return configId The verification config ID
     * @return contractScope The computed scope
     */
    function getContractInfo() external view returns (
        address hubAddress,
        bytes32 configId,
        uint256 contractScope
    ) {
        return (
            address(hub),
            verificationConfigId,
            scope()
        );
    }
}